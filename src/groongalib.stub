;;;
;;; gauche_groongalib.stub
;;;

"
#include \"gauche_groonga.h\"
#include \"groonga.h\"
"

(include "gauche-groonga.types")

;; The following entry is a dummy one.
;; Replace it for your definitions.

(define-cproc test-gauche_groonga () ::<const-cstring>
  (result "gauche_groonga is working"))

(define-cproc grn-init () ::<grn-rc>
  (result (grn_init)))

(define-cproc grn-fin () ::<grn-rc>
  (result (grn_fin)))

(define-cproc grn-ctx-init
  (ctx::<grn-ctx> flags::<int>) ::<grn-rc>
  (result (grn_ctx_init (& (-> ctx h)) flags)))

(define-cproc grn-ctx-fin
  (ctx::<grn-ctx>) ::<grn-rc>
  (result (grn_ctx_fin (& (-> ctx h)))))

(define-cproc grn-ctx-open
  (flags::<int>) ::<grn-ctx>
  (let* ([ctx::ScmGrnCtx* (SCM_NEW ScmGrnCtx)]
	 )
    (SCM_SET_CLASS ctx SCM_CLASS_GRN_CTX)
    (set! (-> ctx h) (* (grn_ctx_open flags)))
    (result ctx)))

(define-cproc grn-ctx-close
  (ctx::<grn-ctx>) ::<grn-rc>
  (result (grn_ctx_close (& (-> ctx h)))))

(define-cproc grn-get-default-encoding () ::<grn-encoding>
  (result (grn_get_default_encoding)))

(define-cproc grn-set-default-encoding
  (encoding::<uint>) ::<grn-rc>
  (result (grn_set_default_encoding encoding)))

(define-cproc grn-get-version () ::<const-cstring>
  (result (grn_get_version)))

(define-cproc grn-get-package () ::<const-cstring>
  (result (grn_get_package)))

(define-cproc grn-get-default-command-version () ::<grn-command-version>
  (result (grn_get_default_command_version)))

(define-cproc grn-set-default-command-version
  (version::<uint>) ::<grn-rc>
  (result (grn_set_default_command_version version)))

(define-cproc grn-ctx-get-command-version
  (ctx::<grn-ctx>) ::<grn-command-version>
  (result (grn_ctx_get_command_version (& (-> ctx h)))))

(define-cproc grn-ctx-set-command-version
  (ctx::<grn-ctx> version::<uint>) ::<grn-rc>
  (result (grn_ctx_set_command_version (& (-> ctx h)) version)))

;; FIXME support long long int as return value
(define-cproc grn-ctx-get-match-escalation-threshold
  (ctx::<grn-ctx>) ::<long>
  (result (grn_ctx_get_match_escalation_threshold (& (-> ctx h)))))

;; FIXME support long long int as parameter value
(define-cproc grn-ctx-set-match-escalation-threshold
  (ctx::<grn-ctx> threshold::<long>) ::<grn-rc>
  (result (grn_ctx_set_match_escalation_threshold (& (-> ctx h)) threshold)))

;; FIXME support long long int as return value
(define-cproc grn-get-default-match-escalation-threshold () ::<long>
  (result (grn_get_default_match_escalation_threshold)))

;; FIXME support long long int as parameter value
(define-cproc grn-set-default-match-escalation-threshold
  (threshold::<long>) ::<grn-rc>
  (result (grn_set_default_match_escalation_threshold threshold)))

;; GRN_API grn_obj *grn_db_create(grn_ctx *ctx, const char *path, grn_db_create_optarg *optarg);

(define-cproc grn-db-open
  (ctx::<grn-ctx> path::<const-cstring>) ::<grn-obj>
  (let* ([obj::ScmGrnObj* (SCM_NEW ScmGrnObj)])
    (SCM_SET_CLASS obj SCM_CLASS_GRN_OBJ)
    (set! (-> obj h) (* (grn_db_open (& (-> ctx h)) path)))
    (result obj)))

(define-cproc grn-db-touch
  (ctx::<grn-ctx> db::<grn-obj>) ::<void>
  (grn_db_touch (& (-> ctx h)) (& (-> db h))))

(define-cproc grn-ctx-use
  (ctx::<grn-ctx> db::<grn-obj>) ::<grn-rc>
  (result (grn_ctx_use (& (-> ctx h)) (& (-> db h)))))

(define-cproc grn-ctx-db
  (ctx::<grn-ctx>) ::<grn-obj>
  (let* ([obj::ScmGrnObj* (SCM_NEW ScmGrnObj)])
    (SCM_SET_CLASS obj SCM_CLASS_GRN_OBJ)
    (set! (-> obj h) (* (grn_ctx_db (& (-> ctx h)))))
    (result obj)))

(define-cproc grn-ctx-get
  (ctx::<grn-ctx> name::<const-cstring> name_size::<uint>) ::<grn-obj>
  (let* ([obj::ScmGrnObj* (SCM_NEW ScmGrnObj)])
    (SCM_SET_CLASS obj SCM_CLASS_GRN_OBJ)
    (set! (-> obj h) (* (grn_ctx_get (& (-> ctx h)) name name_size)))
    (result obj)))

(define-cproc grn-ctx-at
  (ctx::<grn-ctx> id::<uint>) ::<grn-obj>
  (let* ([obj::ScmGrnObj* (SCM_NEW ScmGrnObj)])
    (SCM_SET_CLASS obj SCM_CLASS_GRN_OBJ)
    (set! (-> obj h) (* (grn_ctx_at (& (-> ctx h)) id)))
    (result obj)))

(define-cproc grn-type-create
  (ctx::<grn-ctx>
   name::<const-cstring>
   name_size::<uint>
   flags::<uint>
   size::<uint>) ::<grn-obj>
   (let* ([obj::ScmGrnObj* (SCM_NEW ScmGrnObj)])
     (SCM_SET_CLASS obj SCM_CLASS_GRN_OBJ)
     (set! (-> obj h) (* (grn_type_create (& (-> ctx h)) name name_size flags size)))
     (result obj)))

(define-cproc grn-plugin-register
  (ctx::<grn-ctx> name::<const-cstring>) ::<grn-rc>
  (result (grn_plugin_register (& (-> ctx h)) name)))

(define-cproc grn-plugin-register-by-path
  (ctx::<grn-ctx> path::<const-cstring>) ::<grn-rc>
  (result (grn_plugin_register_by_path (& (-> ctx h)) path)))

(define-cproc grn-plugin-get-system-plugins-dir () ::<const-cstring>
  (result (grn_plugin_get_system_plugins_dir)))

(define-cproc grn-plugin-get-suffix () ::<const-cstring>
  (result (grn_plugin_get_suffix)))


;; GRN_API grn_obj *grn_proc_create(grn_ctx *ctx,
;; const char *name, unsigned int name_size, grn_proc_type type,
;; grn_proc_func *init, grn_proc_func *next, grn_proc_func *fin,
;; unsigned int nvars, grn_expr_var *vars);

(define-cproc grn-table-create
  (ctx::<grn-ctx>
   name::<const-cstring> name_size::<uint>
   path::<const-cstring> flags::<uint>
   key_type::<grn-obj> value_type::<grn-obj>) ::<grn-obj>
   (let* ([obj::ScmGrnObj* (SCM_NEW ScmGrnObj)])
     (SCM_SET_CLASS obj SCM_CLASS_GRN_OBJ)
     (set! (-> obj h) (* (grn_table_create (& (-> ctx h)) name name_size
					   path flags
					   (& (-> key_type h)) (& (-> value_type h)))))
     (result obj)))


(define-cclass <grn-obj> :base "ScmGrnObj*" "Scm_GrnObjClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmGrnObj* (SCM_ALLOCATE ScmGrnObj klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

(define-cclass <grn-ctx> :base "ScmGrnCtx*" "Scm_GrnCtxClass"
  ()
  ()
  [allocator
   (let* ([ctx::ScmGrnCtx* (SCM_ALLOCATE ScmGrnCtx klass)])
     (SCM_SET_CLASS ctx klass)
     (return (SCM_OBJ ctx)))])

;; Local variables:
;; mode: scheme
;; end:
